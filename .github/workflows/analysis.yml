name: analyses

# Trigger workflow on push and pull request events targeting the main branch.
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

     # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
      contents: read
      pages: write
      id-token: write
    
    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
      group: "pages"
      cancel-in-progress: false

jobs:
  # Step 1: Install dependencies and cache node_modules
  install:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - uses: actions/checkout@v2
      
      # Install project dependencies using npm ci for clean install
      - name: Install Dependencies
        run: npm ci
      
      # Cache node_modules for future jobs to speed up workflow
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ github.sha }}

  build:
    needs: install 
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - uses: actions/checkout@v2
      
      # Use cached node_modules to avoid reinstalling dependencies
      - name: Cached node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ github.sha }}

      # Run the build command
      - name: Build
        run: npm run build
        
        

  # Step 2: Run lint checks with ESLint
  lint:
    needs: install # Depends on the install job
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - uses: actions/checkout@v2
      
      # Use cached node_modules to avoid reinstalling dependencies
      - name: Cached node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ github.sha }}

      # Run ESLint to check for code quality issues
      - name: ESLint
        run: npm run lint:check

  # Step 3: Run Prettier to check code formatting
  prettier:
    needs: install # Depends on the install job
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - uses: actions/checkout@v2
      
      # Use cached node_modules to avoid reinstalling dependencies
      - name: Cached node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ github.sha }}

      # Run Prettier to check code formatting
      - name: Prettier
        run: npm run prettier:check

  # Step 4: Run TypeScript checks to ensure there are no type errors
  typescript:
    needs: install # Depends on the install job
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository
      - uses: actions/checkout@v2
      
      # Use cached node_modules to avoid reinstalling dependencies
      - name: Cached node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ github.sha }}

      # Run TypeScript checks
      - name: TypeScript
        run: npm run ts:check


  # Step 5: Run unit tests
  # unit_tests:
  #   needs: install # Depends on the install job
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Check out the code from the repository
  #     - uses: actions/checkout@v2
      
  #     # Use cached node_modules to avoid reinstalling dependencies
  #     - name: Cached node modules
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: ${{ github.sha }}

  #     # Run unit tests
  #     - name: Unit tests
  #       run: npm run test:unit

  #     # Generate coverage report
  #     - name: Generate Coverage Report
  #       run: npm run coverage

  #     # Upload coverage report
  #     - name: Upload coverage Report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: coverage-report
  #         path: coverage



   # Single deploy job since we're just deploying
  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
         
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  